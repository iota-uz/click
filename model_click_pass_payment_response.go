/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"encoding/json"
)

// checks if the ClickPassPaymentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClickPassPaymentResponse{}

// ClickPassPaymentResponse struct for ClickPassPaymentResponse
type ClickPassPaymentResponse struct {
	// Error code
	ErrorCode *int32 `json:"error_code,omitempty" xml:"error_code"`
	// Error description
	ErrorNote *string `json:"error_note,omitempty" xml:"error_note"`
	// Payment Identifier
	PaymentId *int64 `json:"payment_id,omitempty" xml:"payment_id"`
	// Payment status code
	PaymentStatus *int32 `json:"payment_status,omitempty" xml:"payment_status"`
	// Confirmation mode status
	ConfirmMode *int32 `json:"confirm_mode,omitempty" xml:"confirm_mode"`
	// Card type
	CardType *string `json:"card_type,omitempty" xml:"card_type"`
	// Card processing
	ProcessingType *string `json:"processing_type,omitempty" xml:"processing_type"`
	// Masked card number
	CardNumber *string `json:"card_number,omitempty" xml:"card_number"`
	// Phone number
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number"`
}

// NewClickPassPaymentResponse instantiates a new ClickPassPaymentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClickPassPaymentResponse() *ClickPassPaymentResponse {
	this := ClickPassPaymentResponse{}
	return &this
}

// NewClickPassPaymentResponseWithDefaults instantiates a new ClickPassPaymentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickPassPaymentResponseWithDefaults() *ClickPassPaymentResponse {
	this := ClickPassPaymentResponse{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ClickPassPaymentResponse) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode) {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentResponse) GetErrorCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ClickPassPaymentResponse) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *ClickPassPaymentResponse) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorNote returns the ErrorNote field value if set, zero value otherwise.
func (o *ClickPassPaymentResponse) GetErrorNote() string {
	if o == nil || IsNil(o.ErrorNote) {
		var ret string
		return ret
	}
	return *o.ErrorNote
}

// GetErrorNoteOk returns a tuple with the ErrorNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentResponse) GetErrorNoteOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorNote) {
		return nil, false
	}
	return o.ErrorNote, true
}

// HasErrorNote returns a boolean if a field has been set.
func (o *ClickPassPaymentResponse) HasErrorNote() bool {
	if o != nil && !IsNil(o.ErrorNote) {
		return true
	}

	return false
}

// SetErrorNote gets a reference to the given string and assigns it to the ErrorNote field.
func (o *ClickPassPaymentResponse) SetErrorNote(v string) {
	o.ErrorNote = &v
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *ClickPassPaymentResponse) GetPaymentId() int64 {
	if o == nil || IsNil(o.PaymentId) {
		var ret int64
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentResponse) GetPaymentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *ClickPassPaymentResponse) HasPaymentId() bool {
	if o != nil && !IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given int64 and assigns it to the PaymentId field.
func (o *ClickPassPaymentResponse) SetPaymentId(v int64) {
	o.PaymentId = &v
}

// GetPaymentStatus returns the PaymentStatus field value if set, zero value otherwise.
func (o *ClickPassPaymentResponse) GetPaymentStatus() int32 {
	if o == nil || IsNil(o.PaymentStatus) {
		var ret int32
		return ret
	}
	return *o.PaymentStatus
}

// GetPaymentStatusOk returns a tuple with the PaymentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentResponse) GetPaymentStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.PaymentStatus) {
		return nil, false
	}
	return o.PaymentStatus, true
}

// HasPaymentStatus returns a boolean if a field has been set.
func (o *ClickPassPaymentResponse) HasPaymentStatus() bool {
	if o != nil && !IsNil(o.PaymentStatus) {
		return true
	}

	return false
}

// SetPaymentStatus gets a reference to the given int32 and assigns it to the PaymentStatus field.
func (o *ClickPassPaymentResponse) SetPaymentStatus(v int32) {
	o.PaymentStatus = &v
}

// GetConfirmMode returns the ConfirmMode field value if set, zero value otherwise.
func (o *ClickPassPaymentResponse) GetConfirmMode() int32 {
	if o == nil || IsNil(o.ConfirmMode) {
		var ret int32
		return ret
	}
	return *o.ConfirmMode
}

// GetConfirmModeOk returns a tuple with the ConfirmMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentResponse) GetConfirmModeOk() (*int32, bool) {
	if o == nil || IsNil(o.ConfirmMode) {
		return nil, false
	}
	return o.ConfirmMode, true
}

// HasConfirmMode returns a boolean if a field has been set.
func (o *ClickPassPaymentResponse) HasConfirmMode() bool {
	if o != nil && !IsNil(o.ConfirmMode) {
		return true
	}

	return false
}

// SetConfirmMode gets a reference to the given int32 and assigns it to the ConfirmMode field.
func (o *ClickPassPaymentResponse) SetConfirmMode(v int32) {
	o.ConfirmMode = &v
}

// GetCardType returns the CardType field value if set, zero value otherwise.
func (o *ClickPassPaymentResponse) GetCardType() string {
	if o == nil || IsNil(o.CardType) {
		var ret string
		return ret
	}
	return *o.CardType
}

// GetCardTypeOk returns a tuple with the CardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentResponse) GetCardTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CardType) {
		return nil, false
	}
	return o.CardType, true
}

// HasCardType returns a boolean if a field has been set.
func (o *ClickPassPaymentResponse) HasCardType() bool {
	if o != nil && !IsNil(o.CardType) {
		return true
	}

	return false
}

// SetCardType gets a reference to the given string and assigns it to the CardType field.
func (o *ClickPassPaymentResponse) SetCardType(v string) {
	o.CardType = &v
}

// GetProcessingType returns the ProcessingType field value if set, zero value otherwise.
func (o *ClickPassPaymentResponse) GetProcessingType() string {
	if o == nil || IsNil(o.ProcessingType) {
		var ret string
		return ret
	}
	return *o.ProcessingType
}

// GetProcessingTypeOk returns a tuple with the ProcessingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentResponse) GetProcessingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingType) {
		return nil, false
	}
	return o.ProcessingType, true
}

// HasProcessingType returns a boolean if a field has been set.
func (o *ClickPassPaymentResponse) HasProcessingType() bool {
	if o != nil && !IsNil(o.ProcessingType) {
		return true
	}

	return false
}

// SetProcessingType gets a reference to the given string and assigns it to the ProcessingType field.
func (o *ClickPassPaymentResponse) SetProcessingType(v string) {
	o.ProcessingType = &v
}

// GetCardNumber returns the CardNumber field value if set, zero value otherwise.
func (o *ClickPassPaymentResponse) GetCardNumber() string {
	if o == nil || IsNil(o.CardNumber) {
		var ret string
		return ret
	}
	return *o.CardNumber
}

// GetCardNumberOk returns a tuple with the CardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentResponse) GetCardNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CardNumber) {
		return nil, false
	}
	return o.CardNumber, true
}

// HasCardNumber returns a boolean if a field has been set.
func (o *ClickPassPaymentResponse) HasCardNumber() bool {
	if o != nil && !IsNil(o.CardNumber) {
		return true
	}

	return false
}

// SetCardNumber gets a reference to the given string and assigns it to the CardNumber field.
func (o *ClickPassPaymentResponse) SetCardNumber(v string) {
	o.CardNumber = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *ClickPassPaymentResponse) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentResponse) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *ClickPassPaymentResponse) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *ClickPassPaymentResponse) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

func (o ClickPassPaymentResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClickPassPaymentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.ErrorNote) {
		toSerialize["error_note"] = o.ErrorNote
	}
	if !IsNil(o.PaymentId) {
		toSerialize["payment_id"] = o.PaymentId
	}
	if !IsNil(o.PaymentStatus) {
		toSerialize["payment_status"] = o.PaymentStatus
	}
	if !IsNil(o.ConfirmMode) {
		toSerialize["confirm_mode"] = o.ConfirmMode
	}
	if !IsNil(o.CardType) {
		toSerialize["card_type"] = o.CardType
	}
	if !IsNil(o.ProcessingType) {
		toSerialize["processing_type"] = o.ProcessingType
	}
	if !IsNil(o.CardNumber) {
		toSerialize["card_number"] = o.CardNumber
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	return toSerialize, nil
}

type NullableClickPassPaymentResponse struct {
	value *ClickPassPaymentResponse
	isSet bool
}

func (v NullableClickPassPaymentResponse) Get() *ClickPassPaymentResponse {
	return v.value
}

func (v *NullableClickPassPaymentResponse) Set(val *ClickPassPaymentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableClickPassPaymentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableClickPassPaymentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickPassPaymentResponse(val *ClickPassPaymentResponse) *NullableClickPassPaymentResponse {
	return &NullableClickPassPaymentResponse{value: val, isSet: true}
}

func (v NullableClickPassPaymentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickPassPaymentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


