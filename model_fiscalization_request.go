/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FiscalizationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiscalizationRequest{}

// FiscalizationRequest struct for FiscalizationRequest
type FiscalizationRequest struct {
	// Service ID
	ServiceId int64 `form:"service_id" json:"service_id"` // Service ID
	// Payment Identifier
	PaymentId int64 `form:"payment_id" json:"payment_id"` // Payment Identifier
	// Items or services list
	Items []Item `form:"items" json:"items"` // Items or services list
	// Amount paid by e-cash in tiyins
	ReceivedEcash *int32 `form:"received_ecash" json:"received_ecash,omitempty"` // Amount paid by e-cash in tiyins
	// Amount paid by cash in tiyins
	ReceivedCash *int32 `form:"received_cash" json:"received_cash,omitempty"` // Amount paid by cash in tiyins
	// Amount paid by card in tiyins
	ReceivedCard *int32 `form:"received_card" json:"received_card,omitempty"` // Amount paid by card in tiyins
}

type _FiscalizationRequest FiscalizationRequest

// NewFiscalizationRequest instantiates a new FiscalizationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiscalizationRequest(serviceId int64, paymentId int64, items []Item) *FiscalizationRequest {
	this := FiscalizationRequest{}
	this.ServiceId = serviceId
	this.PaymentId = paymentId
	this.Items = items
	return &this
}

// NewFiscalizationRequestWithDefaults instantiates a new FiscalizationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiscalizationRequestWithDefaults() *FiscalizationRequest {
	this := FiscalizationRequest{}
	return &this
}

// GetServiceId returns the ServiceId field value
func (o *FiscalizationRequest) GetServiceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *FiscalizationRequest) GetServiceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *FiscalizationRequest) SetServiceId(v int64) {
	o.ServiceId = v
}

// GetPaymentId returns the PaymentId field value
func (o *FiscalizationRequest) GetPaymentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value
// and a boolean to check if the value has been set.
func (o *FiscalizationRequest) GetPaymentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentId, true
}

// SetPaymentId sets field value
func (o *FiscalizationRequest) SetPaymentId(v int64) {
	o.PaymentId = v
}

// GetItems returns the Items field value
func (o *FiscalizationRequest) GetItems() []Item {
	if o == nil {
		var ret []Item
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *FiscalizationRequest) GetItemsOk() ([]Item, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *FiscalizationRequest) SetItems(v []Item) {
	o.Items = v
}

// GetReceivedEcash returns the ReceivedEcash field value if set, zero value otherwise.
func (o *FiscalizationRequest) GetReceivedEcash() int32 {
	if o == nil || IsNil(o.ReceivedEcash) {
		var ret int32
		return ret
	}
	return *o.ReceivedEcash
}

// GetReceivedEcashOk returns a tuple with the ReceivedEcash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalizationRequest) GetReceivedEcashOk() (*int32, bool) {
	if o == nil || IsNil(o.ReceivedEcash) {
		return nil, false
	}
	return o.ReceivedEcash, true
}

// HasReceivedEcash returns a boolean if a field has been set.
func (o *FiscalizationRequest) HasReceivedEcash() bool {
	if o != nil && !IsNil(o.ReceivedEcash) {
		return true
	}

	return false
}

// SetReceivedEcash gets a reference to the given int32 and assigns it to the ReceivedEcash field.
func (o *FiscalizationRequest) SetReceivedEcash(v int32) {
	o.ReceivedEcash = &v
}

// GetReceivedCash returns the ReceivedCash field value if set, zero value otherwise.
func (o *FiscalizationRequest) GetReceivedCash() int32 {
	if o == nil || IsNil(o.ReceivedCash) {
		var ret int32
		return ret
	}
	return *o.ReceivedCash
}

// GetReceivedCashOk returns a tuple with the ReceivedCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalizationRequest) GetReceivedCashOk() (*int32, bool) {
	if o == nil || IsNil(o.ReceivedCash) {
		return nil, false
	}
	return o.ReceivedCash, true
}

// HasReceivedCash returns a boolean if a field has been set.
func (o *FiscalizationRequest) HasReceivedCash() bool {
	if o != nil && !IsNil(o.ReceivedCash) {
		return true
	}

	return false
}

// SetReceivedCash gets a reference to the given int32 and assigns it to the ReceivedCash field.
func (o *FiscalizationRequest) SetReceivedCash(v int32) {
	o.ReceivedCash = &v
}

// GetReceivedCard returns the ReceivedCard field value if set, zero value otherwise.
func (o *FiscalizationRequest) GetReceivedCard() int32 {
	if o == nil || IsNil(o.ReceivedCard) {
		var ret int32
		return ret
	}
	return *o.ReceivedCard
}

// GetReceivedCardOk returns a tuple with the ReceivedCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalizationRequest) GetReceivedCardOk() (*int32, bool) {
	if o == nil || IsNil(o.ReceivedCard) {
		return nil, false
	}
	return o.ReceivedCard, true
}

// HasReceivedCard returns a boolean if a field has been set.
func (o *FiscalizationRequest) HasReceivedCard() bool {
	if o != nil && !IsNil(o.ReceivedCard) {
		return true
	}

	return false
}

// SetReceivedCard gets a reference to the given int32 and assigns it to the ReceivedCard field.
func (o *FiscalizationRequest) SetReceivedCard(v int32) {
	o.ReceivedCard = &v
}

func (o FiscalizationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiscalizationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service_id"] = o.ServiceId
	toSerialize["payment_id"] = o.PaymentId
	toSerialize["items"] = o.Items
	if !IsNil(o.ReceivedEcash) {
		toSerialize["received_ecash"] = o.ReceivedEcash
	}
	if !IsNil(o.ReceivedCash) {
		toSerialize["received_cash"] = o.ReceivedCash
	}
	if !IsNil(o.ReceivedCard) {
		toSerialize["received_card"] = o.ReceivedCard
	}
	return toSerialize, nil
}

func (o *FiscalizationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_id",
		"payment_id",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFiscalizationRequest := _FiscalizationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFiscalizationRequest)

	if err != nil {
		return err
	}

	*o = FiscalizationRequest(varFiscalizationRequest)

	return err
}

type NullableFiscalizationRequest struct {
	value *FiscalizationRequest
	isSet bool
}

func (v NullableFiscalizationRequest) Get() *FiscalizationRequest {
	return v.value
}

func (v *NullableFiscalizationRequest) Set(val *FiscalizationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalizationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalizationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalizationRequest(val *FiscalizationRequest) *NullableFiscalizationRequest {
	return &NullableFiscalizationRequest{value: val, isSet: true}
}

func (v NullableFiscalizationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalizationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
