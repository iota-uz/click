/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type FiscalizationAPI interface {

	/*
	GetFiscalData Retrieving fiscal data (URL)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId
	@param paymentId
	@return FiscalizationAPIGetFiscalDataRequest
	*/
	GetFiscalData(ctx context.Context, serviceId int64, paymentId int64) FiscalizationAPIGetFiscalDataRequest

	// GetFiscalDataExecute executes the request
	//  @return FiscalDataResponse
	GetFiscalDataExecute(r FiscalizationAPIGetFiscalDataRequest) (*FiscalDataResponse, *http.Response, error)

	/*
	SubmitFiscalItems Fiscalization of goods and services

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FiscalizationAPISubmitFiscalItemsRequest
	*/
	SubmitFiscalItems(ctx context.Context) FiscalizationAPISubmitFiscalItemsRequest

	// SubmitFiscalItemsExecute executes the request
	//  @return FiscalizationResponse
	SubmitFiscalItemsExecute(r FiscalizationAPISubmitFiscalItemsRequest) (*FiscalizationResponse, *http.Response, error)

	/*
	SubmitFiscalQRCode Registering already fiscalized check

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FiscalizationAPISubmitFiscalQRCodeRequest
	*/
	SubmitFiscalQRCode(ctx context.Context) FiscalizationAPISubmitFiscalQRCodeRequest

	// SubmitFiscalQRCodeExecute executes the request
	//  @return FiscalQRCodeResponse
	SubmitFiscalQRCodeExecute(r FiscalizationAPISubmitFiscalQRCodeRequest) (*FiscalQRCodeResponse, *http.Response, error)
}

// FiscalizationAPIService FiscalizationAPI service
type FiscalizationAPIService service

type FiscalizationAPIGetFiscalDataRequest struct {
	ctx context.Context
	ApiService FiscalizationAPI
	serviceId int64
	paymentId int64
}

func (r FiscalizationAPIGetFiscalDataRequest) Execute() (*FiscalDataResponse, *http.Response, error) {
	return r.ApiService.GetFiscalDataExecute(r)
}

/*
GetFiscalData Retrieving fiscal data (URL)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId
 @param paymentId
 @return FiscalizationAPIGetFiscalDataRequest
*/
func (a *FiscalizationAPIService) GetFiscalData(ctx context.Context, serviceId int64, paymentId int64) FiscalizationAPIGetFiscalDataRequest {
	return FiscalizationAPIGetFiscalDataRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		paymentId: paymentId,
	}
}

// Execute executes the request
//  @return FiscalDataResponse
func (a *FiscalizationAPIService) GetFiscalDataExecute(r FiscalizationAPIGetFiscalDataRequest) (*FiscalDataResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FiscalDataResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FiscalizationAPIService.GetFiscalData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/merchant/payment/ofd_data/{service_id}/{payment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_id"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"payment_id"+"}", url.PathEscape(parameterValueToString(r.paymentId, "paymentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["AuthHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FiscalizationAPISubmitFiscalItemsRequest struct {
	ctx context.Context
	ApiService FiscalizationAPI
	fiscalizationRequest *FiscalizationRequest
}

func (r FiscalizationAPISubmitFiscalItemsRequest) FiscalizationRequest(fiscalizationRequest FiscalizationRequest) FiscalizationAPISubmitFiscalItemsRequest {
	r.fiscalizationRequest = &fiscalizationRequest
	return r
}

func (r FiscalizationAPISubmitFiscalItemsRequest) Execute() (*FiscalizationResponse, *http.Response, error) {
	return r.ApiService.SubmitFiscalItemsExecute(r)
}

/*
SubmitFiscalItems Fiscalization of goods and services

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FiscalizationAPISubmitFiscalItemsRequest
*/
func (a *FiscalizationAPIService) SubmitFiscalItems(ctx context.Context) FiscalizationAPISubmitFiscalItemsRequest {
	return FiscalizationAPISubmitFiscalItemsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FiscalizationResponse
func (a *FiscalizationAPIService) SubmitFiscalItemsExecute(r FiscalizationAPISubmitFiscalItemsRequest) (*FiscalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FiscalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FiscalizationAPIService.SubmitFiscalItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/merchant/payment/ofd_data/submit_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fiscalizationRequest == nil {
		return localVarReturnValue, nil, reportError("fiscalizationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fiscalizationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["AuthHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FiscalizationAPISubmitFiscalQRCodeRequest struct {
	ctx context.Context
	ApiService FiscalizationAPI
	fiscalQRCodeRequest *FiscalQRCodeRequest
}

func (r FiscalizationAPISubmitFiscalQRCodeRequest) FiscalQRCodeRequest(fiscalQRCodeRequest FiscalQRCodeRequest) FiscalizationAPISubmitFiscalQRCodeRequest {
	r.fiscalQRCodeRequest = &fiscalQRCodeRequest
	return r
}

func (r FiscalizationAPISubmitFiscalQRCodeRequest) Execute() (*FiscalQRCodeResponse, *http.Response, error) {
	return r.ApiService.SubmitFiscalQRCodeExecute(r)
}

/*
SubmitFiscalQRCode Registering already fiscalized check

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FiscalizationAPISubmitFiscalQRCodeRequest
*/
func (a *FiscalizationAPIService) SubmitFiscalQRCode(ctx context.Context) FiscalizationAPISubmitFiscalQRCodeRequest {
	return FiscalizationAPISubmitFiscalQRCodeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FiscalQRCodeResponse
func (a *FiscalizationAPIService) SubmitFiscalQRCodeExecute(r FiscalizationAPISubmitFiscalQRCodeRequest) (*FiscalQRCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FiscalQRCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FiscalizationAPIService.SubmitFiscalQRCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/merchant/payment/ofd_data/submit_qrcode"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fiscalQRCodeRequest == nil {
		return localVarReturnValue, nil, reportError("fiscalQRCodeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fiscalQRCodeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["AuthHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
