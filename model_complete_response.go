/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CompleteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteResponse{}

// CompleteResponse Response structure for the Complete stage. Returns transaction result.
type CompleteResponse struct {
	// Payment ID in CLICK system.
	ClickTransId int64 `form:"click_trans_id" json:"click_trans_id"` // Payment ID in CLICK system.
	// Order ID / personal account / login in the supplier billing system.
	MerchantTransId string `form:"merchant_trans_id" json:"merchant_trans_id"` // Order ID / personal account / login in the supplier billing system.
	// Transaction ID to complete the payment in the billing system. May be 0 if not applicable.
	MerchantConfirmId int32 `form:"merchant_confirm_id" json:"merchant_confirm_id"` // Transaction ID to complete the payment in the billing system. May be 0 if not applicable.
	// Status code for completion of payment. 0 – success. Otherwise, an error code.
	Error int32 `form:"error" json:"error"` // Status code for completion of payment. 0 – success. Otherwise, an error code.
	// Description of the error code or result.
	ErrorNote string `form:"error_note" json:"error_note"` // Description of the error code or result.
}

type _CompleteResponse CompleteResponse

// NewCompleteResponse instantiates a new CompleteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteResponse(clickTransId int64, merchantTransId string, merchantConfirmId int32, error_ int32, errorNote string) *CompleteResponse {
	this := CompleteResponse{}
	this.ClickTransId = clickTransId
	this.MerchantTransId = merchantTransId
	this.MerchantConfirmId = merchantConfirmId
	this.Error = error_
	this.ErrorNote = errorNote
	return &this
}

// NewCompleteResponseWithDefaults instantiates a new CompleteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteResponseWithDefaults() *CompleteResponse {
	this := CompleteResponse{}
	return &this
}

// GetClickTransId returns the ClickTransId field value
func (o *CompleteResponse) GetClickTransId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ClickTransId
}

// GetClickTransIdOk returns a tuple with the ClickTransId field value
// and a boolean to check if the value has been set.
func (o *CompleteResponse) GetClickTransIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClickTransId, true
}

// SetClickTransId sets field value
func (o *CompleteResponse) SetClickTransId(v int64) {
	o.ClickTransId = v
}

// GetMerchantTransId returns the MerchantTransId field value
func (o *CompleteResponse) GetMerchantTransId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantTransId
}

// GetMerchantTransIdOk returns a tuple with the MerchantTransId field value
// and a boolean to check if the value has been set.
func (o *CompleteResponse) GetMerchantTransIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantTransId, true
}

// SetMerchantTransId sets field value
func (o *CompleteResponse) SetMerchantTransId(v string) {
	o.MerchantTransId = v
}

// GetMerchantConfirmId returns the MerchantConfirmId field value
func (o *CompleteResponse) GetMerchantConfirmId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MerchantConfirmId
}

// GetMerchantConfirmIdOk returns a tuple with the MerchantConfirmId field value
// and a boolean to check if the value has been set.
func (o *CompleteResponse) GetMerchantConfirmIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantConfirmId, true
}

// SetMerchantConfirmId sets field value
func (o *CompleteResponse) SetMerchantConfirmId(v int32) {
	o.MerchantConfirmId = v
}

// GetError returns the Error field value
func (o *CompleteResponse) GetError() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *CompleteResponse) GetErrorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *CompleteResponse) SetError(v int32) {
	o.Error = v
}

// GetErrorNote returns the ErrorNote field value
func (o *CompleteResponse) GetErrorNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorNote
}

// GetErrorNoteOk returns a tuple with the ErrorNote field value
// and a boolean to check if the value has been set.
func (o *CompleteResponse) GetErrorNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorNote, true
}

// SetErrorNote sets field value
func (o *CompleteResponse) SetErrorNote(v string) {
	o.ErrorNote = v
}

func (o CompleteResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["click_trans_id"] = o.ClickTransId
	toSerialize["merchant_trans_id"] = o.MerchantTransId
	toSerialize["merchant_confirm_id"] = o.MerchantConfirmId
	toSerialize["error"] = o.Error
	toSerialize["error_note"] = o.ErrorNote
	return toSerialize, nil
}

func (o *CompleteResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"click_trans_id",
		"merchant_trans_id",
		"merchant_confirm_id",
		"error",
		"error_note",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompleteResponse := _CompleteResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompleteResponse)

	if err != nil {
		return err
	}

	*o = CompleteResponse(varCompleteResponse)

	return err
}

type NullableCompleteResponse struct {
	value *CompleteResponse
	isSet bool
}

func (v NullableCompleteResponse) Get() *CompleteResponse {
	return v.value
}

func (v *NullableCompleteResponse) Set(val *CompleteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteResponse(val *CompleteResponse) *NullableCompleteResponse {
	return &NullableCompleteResponse{value: val, isSet: true}
}

func (v NullableCompleteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
