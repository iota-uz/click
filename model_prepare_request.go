/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PrepareRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrepareRequest{}

// PrepareRequest Request parameters for the Prepare stage (action = 0). Used to validate and initialize payment.
type PrepareRequest struct {
	// ID of transaction (iteration) in CLICK system, i.e. attempt to make a payment.
	ClickTransId int64 `form:"click_trans_id" json:"click_trans_id"` // ID of transaction (iteration) in CLICK system, i.e. attempt to make a payment.
	// ID of the service.
	ServiceId int64 `form:"service_id" json:"service_id"` // ID of the service.
	// Payment ID in CLICK system. Displayed to the customer in SMS when paying.
	ClickPaydocId int64 `form:"click_paydoc_id" json:"click_paydoc_id"` // Payment ID in CLICK system. Displayed to the customer in SMS when paying.
	// Order ID / personal account / login in the supplier billing system.
	MerchantTransId string `form:"merchant_trans_id" json:"merchant_trans_id"` // Order ID / personal account / login in the supplier billing system.
	// Payment amount (in soums).
	Amount float64 `form:"amount" json:"amount"` // Payment amount (in soums).
	// Action to perform. 0 – for Prepare stage.
	Action int32 `form:"action" json:"action"` // Action to perform. 0 – for Prepare stage.
	// Status code for completion of payment. 0 – success. Otherwise, an error code.
	Error int32 `form:"error" json:"error"` // Status code for completion of payment. 0 – success. Otherwise, an error code.
	// Description of the error code or result.
	ErrorNote string `form:"error_note" json:"error_note"` // Description of the error code or result.
	// Payment date in format: 'YYYY-MM-DD HH:mm:ss'.
	SignTime string `form:"sign_time" json:"sign_time"` // Payment date in format: &#39;YYYY-MM-DD HH:mm:ss&#39;.
	// Verification string. MD5 hash of: click_trans_id + service_id + SECRET_KEY + merchant_trans_id + amount + action + sign_time.
	SignString string `form:"sign_string" json:"sign_string"` // Verification string. MD5 hash of: click_trans_id + service_id + SECRET_KEY + merchant_trans_id + amount + action + sign_time.
}

type _PrepareRequest PrepareRequest

// NewPrepareRequest instantiates a new PrepareRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareRequest(clickTransId int64, serviceId int64, clickPaydocId int64, merchantTransId string, amount float64, action int32, error_ int32, errorNote string, signTime string, signString string) *PrepareRequest {
	this := PrepareRequest{}
	this.ClickTransId = clickTransId
	this.ServiceId = serviceId
	this.ClickPaydocId = clickPaydocId
	this.MerchantTransId = merchantTransId
	this.Amount = amount
	this.Action = action
	this.Error = error_
	this.ErrorNote = errorNote
	this.SignTime = signTime
	this.SignString = signString
	return &this
}

// NewPrepareRequestWithDefaults instantiates a new PrepareRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareRequestWithDefaults() *PrepareRequest {
	this := PrepareRequest{}
	return &this
}

// GetClickTransId returns the ClickTransId field value
func (o *PrepareRequest) GetClickTransId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ClickTransId
}

// GetClickTransIdOk returns a tuple with the ClickTransId field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetClickTransIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClickTransId, true
}

// SetClickTransId sets field value
func (o *PrepareRequest) SetClickTransId(v int64) {
	o.ClickTransId = v
}

// GetServiceId returns the ServiceId field value
func (o *PrepareRequest) GetServiceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetServiceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *PrepareRequest) SetServiceId(v int64) {
	o.ServiceId = v
}

// GetClickPaydocId returns the ClickPaydocId field value
func (o *PrepareRequest) GetClickPaydocId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ClickPaydocId
}

// GetClickPaydocIdOk returns a tuple with the ClickPaydocId field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetClickPaydocIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClickPaydocId, true
}

// SetClickPaydocId sets field value
func (o *PrepareRequest) SetClickPaydocId(v int64) {
	o.ClickPaydocId = v
}

// GetMerchantTransId returns the MerchantTransId field value
func (o *PrepareRequest) GetMerchantTransId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantTransId
}

// GetMerchantTransIdOk returns a tuple with the MerchantTransId field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetMerchantTransIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantTransId, true
}

// SetMerchantTransId sets field value
func (o *PrepareRequest) SetMerchantTransId(v string) {
	o.MerchantTransId = v
}

// GetAmount returns the Amount field value
func (o *PrepareRequest) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PrepareRequest) SetAmount(v float64) {
	o.Amount = v
}

// GetAction returns the Action field value
func (o *PrepareRequest) GetAction() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetActionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *PrepareRequest) SetAction(v int32) {
	o.Action = v
}

// GetError returns the Error field value
func (o *PrepareRequest) GetError() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetErrorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *PrepareRequest) SetError(v int32) {
	o.Error = v
}

// GetErrorNote returns the ErrorNote field value
func (o *PrepareRequest) GetErrorNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorNote
}

// GetErrorNoteOk returns a tuple with the ErrorNote field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetErrorNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorNote, true
}

// SetErrorNote sets field value
func (o *PrepareRequest) SetErrorNote(v string) {
	o.ErrorNote = v
}

// GetSignTime returns the SignTime field value
func (o *PrepareRequest) GetSignTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignTime
}

// GetSignTimeOk returns a tuple with the SignTime field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetSignTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignTime, true
}

// SetSignTime sets field value
func (o *PrepareRequest) SetSignTime(v string) {
	o.SignTime = v
}

// GetSignString returns the SignString field value
func (o *PrepareRequest) GetSignString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignString
}

// GetSignStringOk returns a tuple with the SignString field value
// and a boolean to check if the value has been set.
func (o *PrepareRequest) GetSignStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignString, true
}

// SetSignString sets field value
func (o *PrepareRequest) SetSignString(v string) {
	o.SignString = v
}

func (o PrepareRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrepareRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["click_trans_id"] = o.ClickTransId
	toSerialize["service_id"] = o.ServiceId
	toSerialize["click_paydoc_id"] = o.ClickPaydocId
	toSerialize["merchant_trans_id"] = o.MerchantTransId
	toSerialize["amount"] = o.Amount
	toSerialize["action"] = o.Action
	toSerialize["error"] = o.Error
	toSerialize["error_note"] = o.ErrorNote
	toSerialize["sign_time"] = o.SignTime
	toSerialize["sign_string"] = o.SignString
	return toSerialize, nil
}

func (o *PrepareRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"click_trans_id",
		"service_id",
		"click_paydoc_id",
		"merchant_trans_id",
		"amount",
		"action",
		"error",
		"error_note",
		"sign_time",
		"sign_string",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrepareRequest := _PrepareRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrepareRequest)

	if err != nil {
		return err
	}

	*o = PrepareRequest(varPrepareRequest)

	return err
}

type NullablePrepareRequest struct {
	value *PrepareRequest
	isSet bool
}

func (v NullablePrepareRequest) Get() *PrepareRequest {
	return v.value
}

func (v *NullablePrepareRequest) Set(val *PrepareRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareRequest(val *PrepareRequest) *NullablePrepareRequest {
	return &NullablePrepareRequest{value: val, isSet: true}
}

func (v NullablePrepareRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
