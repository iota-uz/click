/*
CLICK-PASS-API

Testing PaymentAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package clickapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/iota-uz/click/clickapi"
)

func Test_clickapi_PaymentAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PaymentAPIService CheckPaymentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId int64
		var paymentId int64

		resp, httpRes, err := apiClient.PaymentAPI.CheckPaymentStatus(context.Background(), serviceId, paymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentAPIService CheckPaymentStatusByMTI", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId int64
		var merchantTransId string

		resp, httpRes, err := apiClient.PaymentAPI.CheckPaymentStatusByMTI(context.Background(), serviceId, merchantTransId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentAPIService ConfirmPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PaymentAPI.ConfirmPayment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentAPIService CreatePaymentWithClickPass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PaymentAPI.CreatePaymentWithClickPass(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentAPIService DisableConfirmationMode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId int64

		resp, httpRes, err := apiClient.PaymentAPI.DisableConfirmationMode(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentAPIService EnableConfirmationMode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId int64

		resp, httpRes, err := apiClient.PaymentAPI.EnableConfirmationMode(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentAPIService PartialRefund", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId int64
		var paymentId int64
		var amount float32

		resp, httpRes, err := apiClient.PaymentAPI.PartialRefund(context.Background(), serviceId, paymentId, amount).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentAPIService PaymentWithToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PaymentAPI.PaymentWithToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentAPIService ReversePayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId int64
		var paymentId int64

		resp, httpRes, err := apiClient.PaymentAPI.ReversePayment(context.Background(), serviceId, paymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
