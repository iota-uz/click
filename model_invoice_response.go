/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"encoding/json"
)

// checks if the InvoiceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoiceResponse{}

// InvoiceResponse struct for InvoiceResponse
type InvoiceResponse struct {
	// Error code
	ErrorCode *int32 `form:"error_code" json:"error_code,omitempty"` // Error code
	// Error description
	ErrorNote *string `form:"error_note" json:"error_note,omitempty"` // Error description
	// Invoice Identifier
	InvoiceId *int64 `form:"invoice_id" json:"invoice_id,omitempty"` // Invoice Identifier
}

// NewInvoiceResponse instantiates a new InvoiceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceResponse() *InvoiceResponse {
	this := InvoiceResponse{}
	return &this
}

// NewInvoiceResponseWithDefaults instantiates a new InvoiceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceResponseWithDefaults() *InvoiceResponse {
	this := InvoiceResponse{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *InvoiceResponse) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode) {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceResponse) GetErrorCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *InvoiceResponse) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *InvoiceResponse) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorNote returns the ErrorNote field value if set, zero value otherwise.
func (o *InvoiceResponse) GetErrorNote() string {
	if o == nil || IsNil(o.ErrorNote) {
		var ret string
		return ret
	}
	return *o.ErrorNote
}

// GetErrorNoteOk returns a tuple with the ErrorNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceResponse) GetErrorNoteOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorNote) {
		return nil, false
	}
	return o.ErrorNote, true
}

// HasErrorNote returns a boolean if a field has been set.
func (o *InvoiceResponse) HasErrorNote() bool {
	if o != nil && !IsNil(o.ErrorNote) {
		return true
	}

	return false
}

// SetErrorNote gets a reference to the given string and assigns it to the ErrorNote field.
func (o *InvoiceResponse) SetErrorNote(v string) {
	o.ErrorNote = &v
}

// GetInvoiceId returns the InvoiceId field value if set, zero value otherwise.
func (o *InvoiceResponse) GetInvoiceId() int64 {
	if o == nil || IsNil(o.InvoiceId) {
		var ret int64
		return ret
	}
	return *o.InvoiceId
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceResponse) GetInvoiceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.InvoiceId) {
		return nil, false
	}
	return o.InvoiceId, true
}

// HasInvoiceId returns a boolean if a field has been set.
func (o *InvoiceResponse) HasInvoiceId() bool {
	if o != nil && !IsNil(o.InvoiceId) {
		return true
	}

	return false
}

// SetInvoiceId gets a reference to the given int64 and assigns it to the InvoiceId field.
func (o *InvoiceResponse) SetInvoiceId(v int64) {
	o.InvoiceId = &v
}

func (o InvoiceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoiceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.ErrorNote) {
		toSerialize["error_note"] = o.ErrorNote
	}
	if !IsNil(o.InvoiceId) {
		toSerialize["invoice_id"] = o.InvoiceId
	}
	return toSerialize, nil
}

type NullableInvoiceResponse struct {
	value *InvoiceResponse
	isSet bool
}

func (v NullableInvoiceResponse) Get() *InvoiceResponse {
	return v.value
}

func (v *NullableInvoiceResponse) Set(val *InvoiceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceResponse(val *InvoiceResponse) *NullableInvoiceResponse {
	return &NullableInvoiceResponse{value: val, isSet: true}
}

func (v NullableInvoiceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
