/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PrepareResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrepareResponse{}

// PrepareResponse Response structure for the Prepare stage. Returns status and identifiers.
type PrepareResponse struct {
	// Payment ID in CLICK system.
	ClickTransId int64 `form:"click_trans_id" json:"click_trans_id"` // Payment ID in CLICK system.
	// Order ID / personal account / login in the supplier billing system.
	MerchantTransId string `form:"merchant_trans_id" json:"merchant_trans_id"` // Order ID / personal account / login in the supplier billing system.
	// Payment ID in the supplier's billing system.
	MerchantPrepareId int64 `form:"merchant_prepare_id" json:"merchant_prepare_id"` // Payment ID in the supplier&#39;s billing system.
	// Status code for completion of payment. 0 – success. Otherwise, an error code.
	Error int32 `form:"error" json:"error"` // Status code for completion of payment. 0 – success. Otherwise, an error code.
	// Description of the error code or result.
	ErrorNote string `form:"error_note" json:"error_note"` // Description of the error code or result.
}

type _PrepareResponse PrepareResponse

// NewPrepareResponse instantiates a new PrepareResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareResponse(clickTransId int64, merchantTransId string, merchantPrepareId int64, error_ int32, errorNote string) *PrepareResponse {
	this := PrepareResponse{}
	this.ClickTransId = clickTransId
	this.MerchantTransId = merchantTransId
	this.MerchantPrepareId = merchantPrepareId
	this.Error = error_
	this.ErrorNote = errorNote
	return &this
}

// NewPrepareResponseWithDefaults instantiates a new PrepareResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareResponseWithDefaults() *PrepareResponse {
	this := PrepareResponse{}
	return &this
}

// GetClickTransId returns the ClickTransId field value
func (o *PrepareResponse) GetClickTransId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ClickTransId
}

// GetClickTransIdOk returns a tuple with the ClickTransId field value
// and a boolean to check if the value has been set.
func (o *PrepareResponse) GetClickTransIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClickTransId, true
}

// SetClickTransId sets field value
func (o *PrepareResponse) SetClickTransId(v int64) {
	o.ClickTransId = v
}

// GetMerchantTransId returns the MerchantTransId field value
func (o *PrepareResponse) GetMerchantTransId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantTransId
}

// GetMerchantTransIdOk returns a tuple with the MerchantTransId field value
// and a boolean to check if the value has been set.
func (o *PrepareResponse) GetMerchantTransIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantTransId, true
}

// SetMerchantTransId sets field value
func (o *PrepareResponse) SetMerchantTransId(v string) {
	o.MerchantTransId = v
}

// GetMerchantPrepareId returns the MerchantPrepareId field value
func (o *PrepareResponse) GetMerchantPrepareId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MerchantPrepareId
}

// GetMerchantPrepareIdOk returns a tuple with the MerchantPrepareId field value
// and a boolean to check if the value has been set.
func (o *PrepareResponse) GetMerchantPrepareIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantPrepareId, true
}

// SetMerchantPrepareId sets field value
func (o *PrepareResponse) SetMerchantPrepareId(v int64) {
	o.MerchantPrepareId = v
}

// GetError returns the Error field value
func (o *PrepareResponse) GetError() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *PrepareResponse) GetErrorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *PrepareResponse) SetError(v int32) {
	o.Error = v
}

// GetErrorNote returns the ErrorNote field value
func (o *PrepareResponse) GetErrorNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorNote
}

// GetErrorNoteOk returns a tuple with the ErrorNote field value
// and a boolean to check if the value has been set.
func (o *PrepareResponse) GetErrorNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorNote, true
}

// SetErrorNote sets field value
func (o *PrepareResponse) SetErrorNote(v string) {
	o.ErrorNote = v
}

func (o PrepareResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrepareResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["click_trans_id"] = o.ClickTransId
	toSerialize["merchant_trans_id"] = o.MerchantTransId
	toSerialize["merchant_prepare_id"] = o.MerchantPrepareId
	toSerialize["error"] = o.Error
	toSerialize["error_note"] = o.ErrorNote
	return toSerialize, nil
}

func (o *PrepareResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"click_trans_id",
		"merchant_trans_id",
		"merchant_prepare_id",
		"error",
		"error_note",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrepareResponse := _PrepareResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrepareResponse)

	if err != nil {
		return err
	}

	*o = PrepareResponse(varPrepareResponse)

	return err
}

type NullablePrepareResponse struct {
	value *PrepareResponse
	isSet bool
}

func (v NullablePrepareResponse) Get() *PrepareResponse {
	return v.value
}

func (v *NullablePrepareResponse) Set(val *PrepareResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareResponse(val *PrepareResponse) *NullablePrepareResponse {
	return &NullablePrepareResponse{value: val, isSet: true}
}

func (v NullablePrepareResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
