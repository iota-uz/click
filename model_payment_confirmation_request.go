/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentConfirmationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentConfirmationRequest{}

// PaymentConfirmationRequest struct for PaymentConfirmationRequest
type PaymentConfirmationRequest struct {
	// Service ID
	ServiceId int64 `json:"service_id"`
	// Payment Identifier
	PaymentId int64 `json:"payment_id"`
}

type _PaymentConfirmationRequest PaymentConfirmationRequest

// NewPaymentConfirmationRequest instantiates a new PaymentConfirmationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentConfirmationRequest(serviceId int64, paymentId int64) *PaymentConfirmationRequest {
	this := PaymentConfirmationRequest{}
	this.ServiceId = serviceId
	this.PaymentId = paymentId
	return &this
}

// NewPaymentConfirmationRequestWithDefaults instantiates a new PaymentConfirmationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentConfirmationRequestWithDefaults() *PaymentConfirmationRequest {
	this := PaymentConfirmationRequest{}
	return &this
}

// GetServiceId returns the ServiceId field value
func (o *PaymentConfirmationRequest) GetServiceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *PaymentConfirmationRequest) GetServiceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *PaymentConfirmationRequest) SetServiceId(v int64) {
	o.ServiceId = v
}

// GetPaymentId returns the PaymentId field value
func (o *PaymentConfirmationRequest) GetPaymentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value
// and a boolean to check if the value has been set.
func (o *PaymentConfirmationRequest) GetPaymentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentId, true
}

// SetPaymentId sets field value
func (o *PaymentConfirmationRequest) SetPaymentId(v int64) {
	o.PaymentId = v
}

func (o PaymentConfirmationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentConfirmationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service_id"] = o.ServiceId
	toSerialize["payment_id"] = o.PaymentId
	return toSerialize, nil
}

func (o *PaymentConfirmationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_id",
		"payment_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentConfirmationRequest := _PaymentConfirmationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentConfirmationRequest)

	if err != nil {
		return err
	}

	*o = PaymentConfirmationRequest(varPaymentConfirmationRequest)

	return err
}

type NullablePaymentConfirmationRequest struct {
	value *PaymentConfirmationRequest
	isSet bool
}

func (v NullablePaymentConfirmationRequest) Get() *PaymentConfirmationRequest {
	return v.value
}

func (v *NullablePaymentConfirmationRequest) Set(val *PaymentConfirmationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentConfirmationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentConfirmationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentConfirmationRequest(val *PaymentConfirmationRequest) *NullablePaymentConfirmationRequest {
	return &NullablePaymentConfirmationRequest{value: val, isSet: true}
}

func (v NullablePaymentConfirmationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentConfirmationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


