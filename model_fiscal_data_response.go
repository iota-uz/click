/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"encoding/json"
)

// checks if the FiscalDataResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiscalDataResponse{}

// FiscalDataResponse struct for FiscalDataResponse
type FiscalDataResponse struct {
	// Payment Id
	PaymentId *int64 `json:"paymentId,omitempty" xml:"paymentId"`
	// URL
	QrCodeURL *string `json:"qrCodeURL,omitempty" xml:"qrCodeURL"`
}

// NewFiscalDataResponse instantiates a new FiscalDataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiscalDataResponse() *FiscalDataResponse {
	this := FiscalDataResponse{}
	return &this
}

// NewFiscalDataResponseWithDefaults instantiates a new FiscalDataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiscalDataResponseWithDefaults() *FiscalDataResponse {
	this := FiscalDataResponse{}
	return &this
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *FiscalDataResponse) GetPaymentId() int64 {
	if o == nil || IsNil(o.PaymentId) {
		var ret int64
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalDataResponse) GetPaymentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *FiscalDataResponse) HasPaymentId() bool {
	if o != nil && !IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given int64 and assigns it to the PaymentId field.
func (o *FiscalDataResponse) SetPaymentId(v int64) {
	o.PaymentId = &v
}

// GetQrCodeURL returns the QrCodeURL field value if set, zero value otherwise.
func (o *FiscalDataResponse) GetQrCodeURL() string {
	if o == nil || IsNil(o.QrCodeURL) {
		var ret string
		return ret
	}
	return *o.QrCodeURL
}

// GetQrCodeURLOk returns a tuple with the QrCodeURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalDataResponse) GetQrCodeURLOk() (*string, bool) {
	if o == nil || IsNil(o.QrCodeURL) {
		return nil, false
	}
	return o.QrCodeURL, true
}

// HasQrCodeURL returns a boolean if a field has been set.
func (o *FiscalDataResponse) HasQrCodeURL() bool {
	if o != nil && !IsNil(o.QrCodeURL) {
		return true
	}

	return false
}

// SetQrCodeURL gets a reference to the given string and assigns it to the QrCodeURL field.
func (o *FiscalDataResponse) SetQrCodeURL(v string) {
	o.QrCodeURL = &v
}

func (o FiscalDataResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiscalDataResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PaymentId) {
		toSerialize["paymentId"] = o.PaymentId
	}
	if !IsNil(o.QrCodeURL) {
		toSerialize["qrCodeURL"] = o.QrCodeURL
	}
	return toSerialize, nil
}

type NullableFiscalDataResponse struct {
	value *FiscalDataResponse
	isSet bool
}

func (v NullableFiscalDataResponse) Get() *FiscalDataResponse {
	return v.value
}

func (v *NullableFiscalDataResponse) Set(val *FiscalDataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalDataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalDataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalDataResponse(val *FiscalDataResponse) *NullableFiscalDataResponse {
	return &NullableFiscalDataResponse{value: val, isSet: true}
}

func (v NullableFiscalDataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalDataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


