/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Item type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Item{}

// Item struct for Item
type Item struct {
	// Item/service name with units at the end
	Name string `form:"Name" json:"Name"` // Item/service name with units at the end
	// Barcode
	Barcode *string `form:"Barcode" json:"Barcode,omitempty"` // Barcode
	// Array of marking codes
	Labels []string `form:"Labels" json:"Labels,omitempty"` // Array of marking codes
	// SPIC code
	SPIC string `form:"SPIC" json:"SPIC"` // SPIC code
	// Unit code
	Units int64 `form:"Units" json:"Units"` // Unit code
	// Package Code
	PackageCode *string `form:"PackageCode" json:"PackageCode,omitempty"` // Package Code
	// Price of one product/service unit
	GoodPrice int64 `form:"GoodPrice" json:"GoodPrice"` // Price of one product/service unit
	// The total amount of the item, including quantity, excluding discounts
	Price *int64 `form:"Price" json:"Price,omitempty"` // The total amount of the item, including quantity, excluding discounts
	// Quantity
	Amount *int64 `form:"Amount" json:"Amount,omitempty"` // Quantity
	// Amount of VAT in tiyins
	VAT *int64 `form:"VAT" json:"VAT,omitempty"` // Amount of VAT in tiyins
	// VAT percentage
	VATPercent *int32 `form:"VATPercent" json:"VATPercent,omitempty"` // VAT percentage
	// Discount
	Discount *int64 `form:"Discount" json:"Discount,omitempty"` // Discount
	// Other discounts
	Other          *int64          `form:"Other" json:"Other,omitempty"` // Other discounts
	CommissionInfo *CommissionInfo `form:"CommissionInfo" json:"CommissionInfo,omitempty"`
}

type _Item Item

// NewItem instantiates a new Item object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItem(name string, sPIC string, units int64, goodPrice int64) *Item {
	this := Item{}
	this.Name = name
	this.SPIC = sPIC
	this.Units = units
	this.GoodPrice = goodPrice
	return &this
}

// NewItemWithDefaults instantiates a new Item object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWithDefaults() *Item {
	this := Item{}
	return &this
}

// GetName returns the Name field value
func (o *Item) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Item) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Item) SetName(v string) {
	o.Name = v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *Item) GetBarcode() string {
	if o == nil || IsNil(o.Barcode) {
		var ret string
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetBarcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *Item) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given string and assigns it to the Barcode field.
func (o *Item) SetBarcode(v string) {
	o.Barcode = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Item) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Item) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *Item) SetLabels(v []string) {
	o.Labels = v
}

// GetSPIC returns the SPIC field value
func (o *Item) GetSPIC() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SPIC
}

// GetSPICOk returns a tuple with the SPIC field value
// and a boolean to check if the value has been set.
func (o *Item) GetSPICOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SPIC, true
}

// SetSPIC sets field value
func (o *Item) SetSPIC(v string) {
	o.SPIC = v
}

// GetUnits returns the Units field value
func (o *Item) GetUnits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *Item) GetUnitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Units, true
}

// SetUnits sets field value
func (o *Item) SetUnits(v int64) {
	o.Units = v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *Item) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *Item) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *Item) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetGoodPrice returns the GoodPrice field value
func (o *Item) GetGoodPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GoodPrice
}

// GetGoodPriceOk returns a tuple with the GoodPrice field value
// and a boolean to check if the value has been set.
func (o *Item) GetGoodPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoodPrice, true
}

// SetGoodPrice sets field value
func (o *Item) SetGoodPrice(v int64) {
	o.GoodPrice = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Item) GetPrice() int64 {
	if o == nil || IsNil(o.Price) {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetPriceOk() (*int64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Item) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *Item) SetPrice(v int64) {
	o.Price = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Item) GetAmount() int64 {
	if o == nil || IsNil(o.Amount) {
		var ret int64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Item) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int64 and assigns it to the Amount field.
func (o *Item) SetAmount(v int64) {
	o.Amount = &v
}

// GetVAT returns the VAT field value if set, zero value otherwise.
func (o *Item) GetVAT() int64 {
	if o == nil || IsNil(o.VAT) {
		var ret int64
		return ret
	}
	return *o.VAT
}

// GetVATOk returns a tuple with the VAT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetVATOk() (*int64, bool) {
	if o == nil || IsNil(o.VAT) {
		return nil, false
	}
	return o.VAT, true
}

// HasVAT returns a boolean if a field has been set.
func (o *Item) HasVAT() bool {
	if o != nil && !IsNil(o.VAT) {
		return true
	}

	return false
}

// SetVAT gets a reference to the given int64 and assigns it to the VAT field.
func (o *Item) SetVAT(v int64) {
	o.VAT = &v
}

// GetVATPercent returns the VATPercent field value if set, zero value otherwise.
func (o *Item) GetVATPercent() int32 {
	if o == nil || IsNil(o.VATPercent) {
		var ret int32
		return ret
	}
	return *o.VATPercent
}

// GetVATPercentOk returns a tuple with the VATPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetVATPercentOk() (*int32, bool) {
	if o == nil || IsNil(o.VATPercent) {
		return nil, false
	}
	return o.VATPercent, true
}

// HasVATPercent returns a boolean if a field has been set.
func (o *Item) HasVATPercent() bool {
	if o != nil && !IsNil(o.VATPercent) {
		return true
	}

	return false
}

// SetVATPercent gets a reference to the given int32 and assigns it to the VATPercent field.
func (o *Item) SetVATPercent(v int32) {
	o.VATPercent = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *Item) GetDiscount() int64 {
	if o == nil || IsNil(o.Discount) {
		var ret int64
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetDiscountOk() (*int64, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *Item) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given int64 and assigns it to the Discount field.
func (o *Item) SetDiscount(v int64) {
	o.Discount = &v
}

// GetOther returns the Other field value if set, zero value otherwise.
func (o *Item) GetOther() int64 {
	if o == nil || IsNil(o.Other) {
		var ret int64
		return ret
	}
	return *o.Other
}

// GetOtherOk returns a tuple with the Other field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetOtherOk() (*int64, bool) {
	if o == nil || IsNil(o.Other) {
		return nil, false
	}
	return o.Other, true
}

// HasOther returns a boolean if a field has been set.
func (o *Item) HasOther() bool {
	if o != nil && !IsNil(o.Other) {
		return true
	}

	return false
}

// SetOther gets a reference to the given int64 and assigns it to the Other field.
func (o *Item) SetOther(v int64) {
	o.Other = &v
}

// GetCommissionInfo returns the CommissionInfo field value if set, zero value otherwise.
func (o *Item) GetCommissionInfo() CommissionInfo {
	if o == nil || IsNil(o.CommissionInfo) {
		var ret CommissionInfo
		return ret
	}
	return *o.CommissionInfo
}

// GetCommissionInfoOk returns a tuple with the CommissionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetCommissionInfoOk() (*CommissionInfo, bool) {
	if o == nil || IsNil(o.CommissionInfo) {
		return nil, false
	}
	return o.CommissionInfo, true
}

// HasCommissionInfo returns a boolean if a field has been set.
func (o *Item) HasCommissionInfo() bool {
	if o != nil && !IsNil(o.CommissionInfo) {
		return true
	}

	return false
}

// SetCommissionInfo gets a reference to the given CommissionInfo and assigns it to the CommissionInfo field.
func (o *Item) SetCommissionInfo(v CommissionInfo) {
	o.CommissionInfo = &v
}

func (o Item) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Item) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Name"] = o.Name
	if !IsNil(o.Barcode) {
		toSerialize["Barcode"] = o.Barcode
	}
	if !IsNil(o.Labels) {
		toSerialize["Labels"] = o.Labels
	}
	toSerialize["SPIC"] = o.SPIC
	toSerialize["Units"] = o.Units
	if !IsNil(o.PackageCode) {
		toSerialize["PackageCode"] = o.PackageCode
	}
	toSerialize["GoodPrice"] = o.GoodPrice
	if !IsNil(o.Price) {
		toSerialize["Price"] = o.Price
	}
	if !IsNil(o.Amount) {
		toSerialize["Amount"] = o.Amount
	}
	if !IsNil(o.VAT) {
		toSerialize["VAT"] = o.VAT
	}
	if !IsNil(o.VATPercent) {
		toSerialize["VATPercent"] = o.VATPercent
	}
	if !IsNil(o.Discount) {
		toSerialize["Discount"] = o.Discount
	}
	if !IsNil(o.Other) {
		toSerialize["Other"] = o.Other
	}
	if !IsNil(o.CommissionInfo) {
		toSerialize["CommissionInfo"] = o.CommissionInfo
	}
	return toSerialize, nil
}

func (o *Item) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Name",
		"SPIC",
		"Units",
		"GoodPrice",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItem := _Item{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varItem)

	if err != nil {
		return err
	}

	*o = Item(varItem)

	return err
}

type NullableItem struct {
	value *Item
	isSet bool
}

func (v NullableItem) Get() *Item {
	return v.value
}

func (v *NullableItem) Set(val *Item) {
	v.value = val
	v.isSet = true
}

func (v NullableItem) IsSet() bool {
	return v.isSet
}

func (v *NullableItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItem(val *Item) *NullableItem {
	return &NullableItem{value: val, isSet: true}
}

func (v NullableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
