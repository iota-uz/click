/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ClickPassPaymentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClickPassPaymentRequest{}

// ClickPassPaymentRequest struct for ClickPassPaymentRequest
type ClickPassPaymentRequest struct {
	// Service ID
	ServiceId int64 `form:"service_id" json:"service_id"` // Service ID
	// QR code contents
	OtpData string `form:"otp_data" json:"otp_data"` // QR code contents
	// Payment amount
	Amount float32 `form:"amount" json:"amount"` // Payment amount
	// Cashbox identifier
	CashboxCode *string `form:"cashbox_code" json:"cashbox_code,omitempty"` // Cashbox identifier
	// Merchant transaction ID
	TransactionId *string `form:"transaction_id" json:"transaction_id,omitempty"` // Merchant transaction ID
}

type _ClickPassPaymentRequest ClickPassPaymentRequest

// NewClickPassPaymentRequest instantiates a new ClickPassPaymentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClickPassPaymentRequest(serviceId int64, otpData string, amount float32) *ClickPassPaymentRequest {
	this := ClickPassPaymentRequest{}
	this.ServiceId = serviceId
	this.OtpData = otpData
	this.Amount = amount
	return &this
}

// NewClickPassPaymentRequestWithDefaults instantiates a new ClickPassPaymentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickPassPaymentRequestWithDefaults() *ClickPassPaymentRequest {
	this := ClickPassPaymentRequest{}
	return &this
}

// GetServiceId returns the ServiceId field value
func (o *ClickPassPaymentRequest) GetServiceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentRequest) GetServiceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *ClickPassPaymentRequest) SetServiceId(v int64) {
	o.ServiceId = v
}

// GetOtpData returns the OtpData field value
func (o *ClickPassPaymentRequest) GetOtpData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OtpData
}

// GetOtpDataOk returns a tuple with the OtpData field value
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentRequest) GetOtpDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OtpData, true
}

// SetOtpData sets field value
func (o *ClickPassPaymentRequest) SetOtpData(v string) {
	o.OtpData = v
}

// GetAmount returns the Amount field value
func (o *ClickPassPaymentRequest) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentRequest) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ClickPassPaymentRequest) SetAmount(v float32) {
	o.Amount = v
}

// GetCashboxCode returns the CashboxCode field value if set, zero value otherwise.
func (o *ClickPassPaymentRequest) GetCashboxCode() string {
	if o == nil || IsNil(o.CashboxCode) {
		var ret string
		return ret
	}
	return *o.CashboxCode
}

// GetCashboxCodeOk returns a tuple with the CashboxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentRequest) GetCashboxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CashboxCode) {
		return nil, false
	}
	return o.CashboxCode, true
}

// HasCashboxCode returns a boolean if a field has been set.
func (o *ClickPassPaymentRequest) HasCashboxCode() bool {
	if o != nil && !IsNil(o.CashboxCode) {
		return true
	}

	return false
}

// SetCashboxCode gets a reference to the given string and assigns it to the CashboxCode field.
func (o *ClickPassPaymentRequest) SetCashboxCode(v string) {
	o.CashboxCode = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *ClickPassPaymentRequest) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPassPaymentRequest) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *ClickPassPaymentRequest) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *ClickPassPaymentRequest) SetTransactionId(v string) {
	o.TransactionId = &v
}

func (o ClickPassPaymentRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClickPassPaymentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service_id"] = o.ServiceId
	toSerialize["otp_data"] = o.OtpData
	toSerialize["amount"] = o.Amount
	if !IsNil(o.CashboxCode) {
		toSerialize["cashbox_code"] = o.CashboxCode
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	return toSerialize, nil
}

func (o *ClickPassPaymentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_id",
		"otp_data",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClickPassPaymentRequest := _ClickPassPaymentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClickPassPaymentRequest)

	if err != nil {
		return err
	}

	*o = ClickPassPaymentRequest(varClickPassPaymentRequest)

	return err
}

type NullableClickPassPaymentRequest struct {
	value *ClickPassPaymentRequest
	isSet bool
}

func (v NullableClickPassPaymentRequest) Get() *ClickPassPaymentRequest {
	return v.value
}

func (v *NullableClickPassPaymentRequest) Set(val *ClickPassPaymentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClickPassPaymentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClickPassPaymentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickPassPaymentRequest(val *ClickPassPaymentRequest) *NullableClickPassPaymentRequest {
	return &NullableClickPassPaymentRequest{value: val, isSet: true}
}

func (v NullableClickPassPaymentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickPassPaymentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
