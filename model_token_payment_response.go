/*
CLICK-PASS-API

API for managing payments and fiscalization with CLICK Pass.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clickapi

import (
	"encoding/json"
)

// checks if the TokenPaymentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenPaymentResponse{}

// TokenPaymentResponse struct for TokenPaymentResponse
type TokenPaymentResponse struct {
	// Error code
	ErrorCode *int32 `json:"error_code,omitempty" xml:"error_code"`
	// Error description
	ErrorNote *string `json:"error_note,omitempty" xml:"error_note"`
	// Payment Identifier
	PaymentId *int64 `json:"payment_id,omitempty" xml:"payment_id"`
	// Payment status code
	PaymentStatus *int32 `json:"payment_status,omitempty" xml:"payment_status"`
}

// NewTokenPaymentResponse instantiates a new TokenPaymentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenPaymentResponse() *TokenPaymentResponse {
	this := TokenPaymentResponse{}
	return &this
}

// NewTokenPaymentResponseWithDefaults instantiates a new TokenPaymentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenPaymentResponseWithDefaults() *TokenPaymentResponse {
	this := TokenPaymentResponse{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *TokenPaymentResponse) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode) {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPaymentResponse) GetErrorCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *TokenPaymentResponse) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *TokenPaymentResponse) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorNote returns the ErrorNote field value if set, zero value otherwise.
func (o *TokenPaymentResponse) GetErrorNote() string {
	if o == nil || IsNil(o.ErrorNote) {
		var ret string
		return ret
	}
	return *o.ErrorNote
}

// GetErrorNoteOk returns a tuple with the ErrorNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPaymentResponse) GetErrorNoteOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorNote) {
		return nil, false
	}
	return o.ErrorNote, true
}

// HasErrorNote returns a boolean if a field has been set.
func (o *TokenPaymentResponse) HasErrorNote() bool {
	if o != nil && !IsNil(o.ErrorNote) {
		return true
	}

	return false
}

// SetErrorNote gets a reference to the given string and assigns it to the ErrorNote field.
func (o *TokenPaymentResponse) SetErrorNote(v string) {
	o.ErrorNote = &v
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *TokenPaymentResponse) GetPaymentId() int64 {
	if o == nil || IsNil(o.PaymentId) {
		var ret int64
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPaymentResponse) GetPaymentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *TokenPaymentResponse) HasPaymentId() bool {
	if o != nil && !IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given int64 and assigns it to the PaymentId field.
func (o *TokenPaymentResponse) SetPaymentId(v int64) {
	o.PaymentId = &v
}

// GetPaymentStatus returns the PaymentStatus field value if set, zero value otherwise.
func (o *TokenPaymentResponse) GetPaymentStatus() int32 {
	if o == nil || IsNil(o.PaymentStatus) {
		var ret int32
		return ret
	}
	return *o.PaymentStatus
}

// GetPaymentStatusOk returns a tuple with the PaymentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPaymentResponse) GetPaymentStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.PaymentStatus) {
		return nil, false
	}
	return o.PaymentStatus, true
}

// HasPaymentStatus returns a boolean if a field has been set.
func (o *TokenPaymentResponse) HasPaymentStatus() bool {
	if o != nil && !IsNil(o.PaymentStatus) {
		return true
	}

	return false
}

// SetPaymentStatus gets a reference to the given int32 and assigns it to the PaymentStatus field.
func (o *TokenPaymentResponse) SetPaymentStatus(v int32) {
	o.PaymentStatus = &v
}

func (o TokenPaymentResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenPaymentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.ErrorNote) {
		toSerialize["error_note"] = o.ErrorNote
	}
	if !IsNil(o.PaymentId) {
		toSerialize["payment_id"] = o.PaymentId
	}
	if !IsNil(o.PaymentStatus) {
		toSerialize["payment_status"] = o.PaymentStatus
	}
	return toSerialize, nil
}

type NullableTokenPaymentResponse struct {
	value *TokenPaymentResponse
	isSet bool
}

func (v NullableTokenPaymentResponse) Get() *TokenPaymentResponse {
	return v.value
}

func (v *NullableTokenPaymentResponse) Set(val *TokenPaymentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenPaymentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenPaymentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenPaymentResponse(val *TokenPaymentResponse) *NullableTokenPaymentResponse {
	return &NullableTokenPaymentResponse{value: val, isSet: true}
}

func (v NullableTokenPaymentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenPaymentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


